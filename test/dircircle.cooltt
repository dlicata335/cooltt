import prelude

-- def dirΩ1s1 : type :=
--  hom dircircle dirbase dirbase -- add cases for dirbase and add test case for dircircle elim
 
-- def loop1 : dirΩ1s1 := x => dirloop x

-- def dirΩ1s1 : type :=
--  hom dircircle dirbase dirbase 


def hom (A : type) (a b : A) : type :=
  (i : 𝟚) → fsub A with [i = d0 ⇒ a | i = d1 ⇒ b]

def dirΩ1s1 : type :=
  hom dircircle dirbase dirbase 

def loop1 : dirΩ1s1 := x => dirloop x

def dirloopid : dircircle -> dircircle :=
  elim [
     | dirbase => dirbase
     | dirloop x => dirloop x
]

def dirloopflat : dircircle -> dircircle :=
  elim [
     | dirbase => dirbase
     | dirloop x => dirbase
]

def natdirloop : nat -> dirΩ1s1 :=
  elim [
     | zero => _ => dirbase
     | suc {x => y} => x => dirloop x
]

-- def loopcomp : type :=
--  dircirclecomp dirbase (dirloop dirbase) (dirloop dirbase dirbase) dirloop dirloop 

def dccomp : dirΩ1s1 :=
  dircirclecomp dirbase dirbase dirbase loop1 loop1